{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","document","getElementById"],"mappings":"mNAEe,SAASA,EAAYC,GAAQ,IAEpCC,EAKID,EALJC,gBACAC,EAIIF,EAJJE,iBACAC,EAGIH,EAHJG,iBACAC,EAEIJ,EAFJI,eACAC,EACIL,EADJK,OAGJ,OACI,6BACI,2BAAOC,KAAK,SAASC,UAAU,QAAQC,MAAOH,EAAQI,SAAUL,IAChE,4BAAQI,MAAON,EAAkBO,SAAUN,GACtCF,EAAgBS,KAAI,SAAAC,GAAM,OACvB,4BAAQC,IAAKD,EAAQH,MAAOG,GAASA,QCXzD,IAAME,EAAW,yCAuEFC,MArEf,WAAgB,IAQZC,EAAUC,EARC,EACiCC,mBAAS,IAD1C,mBACNhB,EADM,KACWiB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNZ,EALM,KAKEoB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KA+Cb,OAtCCD,GACDV,EAAaX,EACbU,EAAWV,EAASkB,IAGpBR,EAAWV,EACXW,EAAaX,EAASkB,GAGtBK,qBAAU,WACRC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDf,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE7B,IAEFN,qBAAU,WACW,MAAhBT,GAAsC,MAAdE,GACzBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IACjDS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE1C,CAACF,EAAcE,IAahB,oCACE,kDACA,kBAACtB,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAAAoC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAOhC,QAChDJ,eAjBN,SAAgCmC,GAC9Bd,EAAUc,EAAEC,OAAOhC,OACnBmB,GAAwB,IAgBpBtB,OAAQW,IAEV,yBAAKT,UAAU,UAAf,KACA,kBAACR,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBmB,EAClBlB,iBAAkB,SAAAoC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOhC,QAC9CJ,eApBN,SAA8BmC,GAC5Bd,EAAUc,EAAEC,OAAOhC,OACnBmB,GAAwB,IAmBpBtB,OAAQU,MCjEhB0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.439fa272.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow(props) {\r\n    const {\r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeCurrency,\r\n        onChangeAmount,\r\n        amount\r\n        } = props\r\n\r\n    return (\r\n        <div>\r\n            <input type='number' className='input' value={amount} onChange={onChangeAmount} />\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n                {currencyOptions.map(option => (\r\n                    <option key={option} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow'\n\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true); //determines whether value was changed in the fromCurrency or the toCurrency\n  \nlet toAmount, fromAmount;\nif(amountInFromCurrency) {\n  fromAmount = amount;\n  toAmount = amount * exchangeRate;\n}\nelse {\n  toAmount = amount;\n  fromAmount = amount / exchangeRate;\n}\n\n  useEffect(() => {\n    fetch(BASE_URL)\n    .then(res => res.json())\n    .then(data => {\n      const firstCurrency = Object.keys(data.rates)[0];\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n      setToCurrency(firstCurrency);\n      setExchangeRate(data.rates[firstCurrency]);\n    })\n  },[]) //runs code when page loads\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n      .then(res => res.json())\n      .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency]) //runs code when fromCurrency or toCurrency is changed\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true); //lets know that amount change is from From\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false); //lets know that amount change is NOT from From\n  }\n\n  return (\n    <>\n      <h1>Currency Converter</h1>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)} //sets the from currency to the state\n        onChangeAmount={handleFromAmountChange} //tells which input is changing, to know how to do the conversion\n        amount={fromAmount}\n      />\n      <div className='equals'>=</div>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange} \n        amount={toAmount}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}